import subprocess
from concurrent.futures import ThreadPoolExecutor, as_completed

# Define all (data_source, config_file, scan_file) combinations
scan_jobs = [
    {
        "data_source": "ds1",
        "config_path": "soda/config_ds1.yml",
        "scan_path": "scan_configs/ds1_scan.yml"
    },
    {
        "data_source": "ds2",
        "config_path": "soda/config_ds2.yml",
        "scan_path": "scan_configs/ds2_scan.yml"
    },
    # Add more data sources and scans here
]

def run_soda_scan(job):
    try:
        result = subprocess.run(
            ["soda", "scan", "-d", job["data_source"], "-c", job["config_path"], job["scan_path"]],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        return {
            "data_source": job["data_source"],
            "scan_path": job["scan_path"],
            "stdout": result.stdout,
            "stderr": result.stderr
        }
    except Exception as e:
        return {
            "data_source": job["data_source"],
            "scan_path": job["scan_path"],
            "stdout": "",
            "stderr": str(e)
        }

if __name__ == '__main__':
    with ThreadPoolExecutor(max_workers=4) as executor:
        futures = [executor.submit(run_soda_scan, job) for job in scan_jobs]

        for future in as_completed(futures):
            result = future.result()
            print(f"=== Scan Result: {result['data_source']} | {result['scan_path']} ===")
            print(result["stdout"])
            if result["stderr"]:
                print("⚠️ Error:", result["stderr"])
z
